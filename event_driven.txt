To read data up to newline from serial port, you can use the `readline` function¹ on Linux or the `SerialPort.ReadLine` method² on Windows. These functions will read data from the serial port until they encounter a newline character, which you can specify by setting the `NewLine` property¹².

To add a function to read data point by parsing a single line from the serial buffer, you need to define the format of the data point and how to extract it from the line. For example, if the data point is a floating-point number followed by a comma, you can use the `strtof` function³ on Linux or the `float.Parse` method on Windows to convert the string to a float value.

Here is a possible example of reading data up to newline and parsing a data point on Linux, based on the code from ²:

```c

#include <stdio.h>

#include <stdlib.h>

#include <unistd.h>

#include <fcntl.h>

#include <termios.h>

#include <ev.h>

#define SERIAL_PORT "/dev/ttyUSB1"

#define BAUD_RATE B9600

#define LINE_SIZE 100

// serial port file descriptor

int fd;

// libev event loop

struct ev_loop *loop;

// libev io watcher

ev_io serial_watcher;

// callback function for serial port data available event

void serial_cb(EV_P_ ev_io *w, int revents)

{

    printf("Data available\n");

    // read data up to newline from serial port

    char line[LINE_SIZE];

    int n = readline(fd, line, LINE_SIZE);

    if (n == -1)

    {

        perror("readline");

        exit(1);

    }

    else if (n == 0)

    {

        printf("No more data\n");

        exit(0);

    }

    else

    {

        printf("Read %d bytes: %s\n", n, line);

    }

    // parse data point from line

    float data_point = strtof(line, NULL);

    printf("Data point: %f\n", data_point);

}

int main()

{

    struct termios options; // terminal options

    // open serial port

    fd = open(SERIAL_PORT, O_RDWR | O_NOCTTY | O_NDELAY);

    if (fd == -1)

    {

        perror("open");

        exit(1);

    }

    // get current terminal options

    tcgetattr(fd, &options);

    // set baud rate

    cfsetispeed(&options, BAUD_RATE);

    cfsetospeed(&options, BAUD_RATE);

    // set other options

    options.c_cflag |= (CLOCAL | CREAD); // enable local mode and receiver

    options.c_cflag &= ~PARENB; // disable parity

    options.c_cflag &= ~CSTOPB; // disable two stop bits

    options.c_cflag &= ~CSIZE; // mask character size bits

    options.c_cflag |= CS8; // set 8 data bits

    options.c_lflag &= ~(ICANON | ECHO | ECHOE | ISIG); // set raw input mode

    options.c_iflag &= ~(IXON | IXOFF | IXANY); // disable software flow control

    options.c_oflag &= ~OPOST; // set raw output mode

    // set new terminal options

    tcsetattr(fd, TCSANOW, &options);

    // set file descriptor as blocking

    fcntl(fd, F_SETFL, 0);

    // create default event loop

    loop = ev_default_loop(0);

    // initialize io watcher for serial port file descriptor

    ev_io_init(&serial_watcher, serial_cb, fd, EV_READ);

    // start io watcher

    ev_io_start(loop, &serial_watcher);

    // start event loop

    ev_run(loop, 0);

    // close serial port

    close(fd);

    return 0;

}

```

Source: Conversation with Bing, 5/10/2023

(1) c - read from serial port - Stack Overflow. https://stackoverflow.com/questions/15258456/read-from-serial-port.

(2) Data received from serial port has incorrect new line characters. https://stackoverflow.com/questions/13992477/data-received-from-serial-port-has-incorrect-new-line-characters.

(3) c# - I need SerialPort event on NewLine received - Stack Overflow. https://stackoverflow.com/questions/12674430/i-need-serialport-event-on-newline-received.
